File: Actions/InventoryActions/OpenInventory.cs
--------------------------------------------------------------------------------
using text_survival.Items;

namespace text_survival.Actions;

public class OpenInventory(bool back = false) : GameActionBase(back ? "Back" : "Open Inventory")
{
    public override bool IsAvailable(GameContext ctx)
    {
        return ctx.player.inventoryManager.Items.Count > 0;
    }
    protected override List<IGameAction> GetNextActions(GameContext ctx)
    {
        var options = new List<IGameAction>();
        foreach (ItemStack stack in ctx.player.inventoryManager.Items)
        {
            options.Add(new DecideInventoryAction(stack));
        }
        options.Add(new ReturnAction("Close Inventory"));
        return options;
    }

    protected override void OnExecute(GameContext ctx)
    {
        ctx.player.inventoryManager.Describe();
    }
    protected override string userPrompt => "Select an item:";
}
================================================================================

File: Actions/InventoryActions/TakeStackFromContainer.cs
--------------------------------------------------------------------------------
using text_survival.Items;

namespace text_survival.Actions;

public class TakeStackFromContainer(Container container, ItemStack stack) : GameActionBase($"Take {stack.DisplayName}")
{
    protected override List<IGameAction> GetNextActions(GameContext ctx)
    {
        return [new OpenContainer(container)]; // will be auto selected until the container is empty then it will auto return
    }

    protected override void OnExecute(GameContext ctx)
    {
        while (stack.Count > 0)
        {
            var item = stack.Pop();
            container.Remove(item);
            ctx.player.TakeItem(item);
        }
    }
    private readonly Container container = container;
    private readonly ItemStack stack = stack;
}
================================================================================

File: Actions/InventoryActions/PickUpItem.cs
--------------------------------------------------------------------------------
using text_survival.Actors;
using text_survival.IO;
using text_survival.Items;

namespace text_survival.Actions;

public class PickUpItem(Item item) : GameActionBase($"Pick up {item.Name}")
{
    public override bool IsAvailable(GameContext ctx) => item.IsFound;

    protected override List<IGameAction> GetNextActions(GameContext ctx)
    {
        return [new LookAround(ctx.player.CurrentLocation)];
    }

    protected override void OnExecute(GameContext ctx)
    {
        Npc? npc = Combat.GetFastestHostileNpc(ctx.currentLocation);
        if (npc != null && Combat.SpeedCheck(ctx.player, npc))
        {
            Output.WriteLine("You couldn't get past the ", npc, "!");
            NextActionOverride = new StartCombatAction(npc);
            return;
        }
        ctx.player.TakeItem(item);
    }
    private readonly Item item = item;
}================================================================================

File: Actions/InventoryActions/DropItem.cs
--------------------------------------------------------------------------------
using text_survival.Items;

namespace text_survival.Actions;

public class DropItem(Item item) : GameActionBase($"Drop {item.Name}")
{
    protected override List<IGameAction> GetNextActions(GameContext ctx) => [];

    protected override void OnExecute(GameContext ctx)
    {
        ctx.player.DropItem(item);
    }
    private readonly Item item = item;
}
================================================================================

File: Actions/InventoryActions/OpenContainer.cs
--------------------------------------------------------------------------------
using text_survival.Actors;
using text_survival.IO;
using text_survival.Items;

namespace text_survival.Actions;

public class OpenContainer(Container container) : GameActionBase($"Look in {container}{(container.IsEmpty ? " (Empty)" : "")}")
{
    public override bool IsAvailable(GameContext ctx) => container.IsFound && !container.IsEmpty;
    protected override List<IGameAction> GetNextActions(GameContext ctx)
    {
        var options = new List<IGameAction>();
        var itemStacks = ItemStack.CreateStacksFromItems(container.Items);
        foreach (var stack in itemStacks)
        {
            options.Add(new TakeStackFromContainer(container, stack));
        }
        options.Add(new TakeAllFromContainer(container));
        options.Add(new ReturnAction($"Close {container.Name}"));
        return options;
    }

    protected override void OnExecute(GameContext ctx)
    {
        Npc? npc = Combat.GetFastestHostileNpc(ctx.currentLocation);
        if (npc != null && Combat.SpeedCheck(ctx.player, npc))
        {
            Output.WriteLine("You couldn't get past the ", npc, "!");
            NextActionOverride = new StartCombatAction(npc);
            return;
        }

        Output.WriteLine("You open the ", this);
    }
    private readonly Container container = container;
}
================================================================================

File: Actions/InventoryActions/UseItem.cs
--------------------------------------------------------------------------------
using text_survival.Items;

namespace text_survival.Actions;

public class UseItem(Item item) : GameActionBase($"Use {item.Name}")
{
    protected override List<IGameAction> GetNextActions(GameContext ctx) => [new OpenInventory()];
    protected override void OnExecute(GameContext ctx)
    {
        ctx.player.UseItem(item);
    }
    private readonly Item item = item;
}
================================================================================

File: Actions/InventoryActions/LootNpc.cs
--------------------------------------------------------------------------------
using text_survival.Actors;
using text_survival.IO;

namespace text_survival.Actions;

public class LootNpc(Npc npc) : GameActionBase($"Loot {npc.Name}")
{
    public override bool IsAvailable(GameContext ctx) => npc.IsFound && !npc.IsAlive && !npc.Loot.IsEmpty;
    protected override void OnExecute(GameContext ctx)
    {
        if (npc.Loot.IsEmpty)
        {
            Output.WriteLine("There is nothing to loot.");
            return;
        }
        // just validate and pass to the OpenContainer action
    }
    protected override List<IGameAction> GetNextActions(GameContext ctx)
    {
        return [new OpenContainer(npc.Loot)];
    }
    private readonly Npc npc = npc;
}
================================================================================

File: Actions/InventoryActions/DecideInventoryAction.cs
--------------------------------------------------------------------------------
using text_survival.Items;

namespace text_survival.Actions;
public class DecideInventoryAction(ItemStack stack) : GameActionBase(stack.DisplayName)
{
    protected override List<IGameAction> GetNextActions(GameContext ctx)
    {
        return [new UseItem(item), new DescribeItem(item), new DropItem(item), new OpenInventory(back: true)];
    }

    protected override void OnExecute(GameContext ctx)
    {
        // pass
    }
    protected override string userPrompt => $"What would you like to do with the {item.Name}";
    private readonly Item item = stack.Peek();
}================================================================================

File: Actions/InventoryActions/TakeAllFromContainer.cs
--------------------------------------------------------------------------------
using text_survival.Items;

namespace text_survival.Actions;

public class TakeAllFromContainer(Container container) : GameActionBase("Take All")
{
    public override bool IsAvailable(GameContext ctx) => container.Count() > 1;

    protected override void OnExecute(GameContext ctx)
    {
        while (!container.IsEmpty)
        {
            var item = container.Items.First();
            container.Remove(item);
            ctx.player.TakeItem(item);
        }
    }
    protected override List<IGameAction> GetNextActions(GameContext ctx) => [];
    private readonly Container container = container;
}
================================================================================

File: Actions/InventoryActions/DescribeItem.cs
--------------------------------------------------------------------------------
using text_survival.Items;

namespace text_survival.Actions;

public class DescribeItem(Item item) : GameActionBase($"Inspect {item.Name}")
{
    protected override List<IGameAction> GetNextActions(GameContext ctx) => [new OpenInventory()];
    protected override void OnExecute(GameContext ctx)
    {
        item.Describe();
    }
    private readonly Item item = item;
}
================================================================================

File: Actions/SurvivalActions/Forage.cs
--------------------------------------------------------------------------------
using text_survival.Environments;
using text_survival.IO;

namespace text_survival.Actions;

public class Forage(string name = "Forage") : GameActionBase(name)
{
    public override bool IsAvailable(GameContext ctx)
    {
        var forageFeature = ctx.player.CurrentLocation.GetFeature<ForageFeature>();
        return forageFeature != null;
    }

    protected override void OnExecute(GameContext ctx)
    {
        var forageFeature = ctx.currentLocation.GetFeature<ForageFeature>();
        if (forageFeature == null)
        {
            Output.WriteLine("You can't forage here");
            return;
        }

        Output.WriteLine("You forage for 1 hour");
        forageFeature.Forage(1);
    }

    protected override List<IGameAction> GetNextActions(GameContext ctx)
    {
        return [
            new Forage("Keep Foraging"),
            new LookAround(ctx.currentLocation),
            new ReturnAction("Finish foraging...")
        ];
    }
}
================================================================================

File: Actions/SurvivalActions/SleepAction.cs
--------------------------------------------------------------------------------
using text_survival.IO;

namespace text_survival.Actions;
public class Sleep() : GameActionBase("Sleep")
{
    protected override List<IGameAction> GetNextActions(GameContext ctx)
    {
        return [];
    }

    protected override void OnExecute(GameContext ctx)
    {
        Output.WriteLine("How many hours would you like to sleep?");
        ctx.player.Sleep(Input.ReadInt() * 60);
    }
    public override bool IsAvailable(GameContext ctx)
    {
        // return ctx.player.Body. // todo only let you sleep when tired
        return base.IsAvailable(ctx);
    }
}================================================================================

File: Actions/Action.cs
--------------------------------------------------------------------------------
using text_survival.IO;
namespace text_survival.Actions;

public interface IGameAction
{
    public string Name { get; set; }
    public void Execute(GameContext ctx);
    public bool IsAvailable(GameContext ctx);
}

public abstract class GameActionBase(string name) : IGameAction
{
    public virtual string Name { get; set; } = name;
    public virtual bool IsAvailable(GameContext ctx) => true;
    public void Execute(GameContext ctx)
    {
        OnExecute(ctx);
        World.Update(1);
        SelectNextAction(ctx);
    }

    protected abstract void OnExecute(GameContext ctx);
    protected abstract List<IGameAction> GetNextActions(GameContext ctx);
    protected IGameAction? NextActionOverride = null;

    private void SelectNextAction(GameContext ctx)
    {
        if (NextActionOverride != null)
        {
            NextActionOverride.Execute(ctx);
            return;
        }

        var actions = GetNextActions(ctx).Where(a => a.IsAvailable(ctx)).ToList();
        if (actions.Count == 0)
        {
            return; // back to main game loop   
        }
        else if (actions.Count == 1)
        {
            actions[0].Execute(ctx);
            return;
        }
        Output.WriteLine("\n" + userPrompt);
        IGameAction action = Input.GetSelectionFromList(actions)!;
        action.Execute(ctx);
    }
    protected virtual string userPrompt => "What would you like to do?";
    public override string ToString() => Name;
}

public class ReturnAction(string name = "Back") : GameActionBase(name)
{
    protected override List<IGameAction> GetNextActions(GameContext ctx)
    {
        return [];
    }

    protected override void OnExecute(GameContext ctx)
    {
        return;
    }
}
================================================================================

File: Actions/InfoActions/CheckStats.cs
--------------------------------------------------------------------------------
using text_survival.IO;

namespace text_survival.Actions;

public class CheckStats() : GameActionBase("Check Stats")
{
    protected override List<IGameAction> GetNextActions(GameContext ctx) => [];

    protected override void OnExecute(GameContext ctx)
    {
        ctx.player.Body.Describe();
        ctx.player.Skills.Describe();
        Output.WriteLine("Press any key to continue...");
        Console.ReadKey(true);
    }
}
================================================================================

File: Actions/InfoActions/LookAround.cs
--------------------------------------------------------------------------------
using text_survival.Actors;
using text_survival.Environments;
using text_survival.IO;
using text_survival.Items;

namespace text_survival.Actions;

public class LookAround(Location location) : GameActionBase($"Look around {location.Name}")
{
    protected override List<IGameAction> GetNextActions(GameContext ctx)
    {
        var actions = new List<IGameAction>();
        foreach (Npc npc in location.Npcs)
        {
            actions.Add(new StartCombatAction(npc));
            actions.Add(new LootNpc(npc));
        }
        foreach (Item item in location.Items)
        {
            actions.Add(new PickUpItem(item));
        }
        foreach (var container in location.Containers)
        {
            actions.Add(new OpenContainer(container));
        }
        actions.Add(new ReturnAction());
        return actions;
    }
    protected override void OnExecute(GameContext ctx)
    {
        Output.WriteLine("You look around the ", location);
        Output.WriteLine("You are in a ", location, " in a ", location.Parent);
        Output.WriteLine("Its ", World.GetTimeOfDay(), " and ", location.GetTemperature(), " degrees.");
        Output.WriteLine("You see:");
        foreach (var thing in location.Items)
        {
            Output.WriteLine(thing);
            thing.IsFound = true;
        }
        foreach (var thing in location.Containers)
        {
            Output.WriteLine(thing);
            thing.IsFound = true;
        }
        foreach (var thing in location.Npcs)
        {
            Output.WriteLine(thing);
            thing.IsFound = true;
        }

        var nearbyLocations = location.GetNearbyLocations();
        if (nearbyLocations.Count == 0)
            return;
        Output.WriteLine("Nearby, you see some other places: ");
        foreach (var location in nearbyLocations)
        {
            Output.WriteLine(location);
            location.IsFound = true;
        }
    }

}
================================================================================

File: Actions/CombatActions/EnemyCombatTurn.cs
--------------------------------------------------------------------------------
using text_survival.Actors;

namespace text_survival.Actions;

public class EnemyCombatTurn(Npc enemy) : GameActionBase("Enemy Turn")
{
    public override bool IsAvailable(GameContext ctx)
    {
        return ctx.player.IsAlive && enemy.IsAlive && enemy.IsEngaged;
    }
    protected override void OnExecute(GameContext ctx)
    {
        Thread.Sleep(500); // Pause before enemy attack
        enemy.Attack(ctx.player);
    }
    protected override List<IGameAction> GetNextActions(GameContext ctx) => [new PlayerCombatTurnAction(enemy), new EndCombatAction(enemy)];
    private readonly Npc enemy = enemy;
}
================================================================================

File: Actions/CombatActions/FleeCombat.cs
--------------------------------------------------------------------------------
using text_survival.Actors;
using text_survival.IO;

namespace text_survival.Actions;

public class FleeCombat(Npc enemy) : GameActionBase("Flee")
{
    protected override List<IGameAction> GetNextActions(GameContext ctx) => [new EnemyCombatTurn(enemy), new EndCombatAction(enemy)];

    protected override void OnExecute(GameContext ctx)
    {
        if (Combat.SpeedCheck(ctx.player, enemy))
        {
            Output.WriteLine("You got away!");
            enemy.IsEngaged = false;
            ctx.player.IsEngaged = false;
            ctx.player.Skills.Reflexes.GainExperience(2);
        }
        else
        {
            Output.WriteLine("You weren't fast enough to get away from ", enemy, "!");
            ctx.player.Skills.Reflexes.GainExperience(1);
        }
    }
}
================================================================================

File: Actions/CombatActions/CastSpell.cs
--------------------------------------------------------------------------------
using text_survival.Actors;
using text_survival.Magic;

namespace text_survival.Actions;

public class SelectSpell(Npc enemy) : GameActionBase("Cast Spell")
{
    protected override List<IGameAction> GetNextActions(GameContext ctx)
    {
        List<IGameAction> options = [];
        foreach (Spell spell in ctx.player._spells)
        {
            options.Add(new SelectSpellTarget(spell, enemy));
        }
        var back = new PlayerCombatTurnAction(enemy);
        back.Name = "Choose a different action.";
        options.Add(back);
        return options;
    }

    protected override void OnExecute(GameContext ctx) { }
    protected override string userPrompt => "Which spell would you like to cast?";
    private readonly Npc enemy = enemy;
}

public class SelectSpellTarget(Spell spell, Npc enemy) : GameActionBase($"Cast {spell.ToString()}")
{
    protected override List<IGameAction> GetNextActions(GameContext ctx) => [new CastSpellAtTarget(spell, enemy, ctx.player), new CastSpellAtTarget(spell, enemy, enemy)];

    protected override void OnExecute(GameContext ctx) { }

    private readonly Npc enemy = enemy;
    private readonly Spell spell = spell;
    protected override string userPrompt => $"Which target would you like to cast {spell} on?";

}

public class CastSpellAtTarget(Spell spell, Npc enemy, Actor target) : GameActionBase($"Cast {spell} on {target}")
{
    protected override List<IGameAction> GetNextActions(GameContext ctx) => [new EnemyCombatTurn(enemy), new EndCombatAction(enemy)];
    protected override void OnExecute(GameContext ctx)
    {
        castSpell(spell, target);
    }
    private void castSpell(Spell spell, Actor target)
    {
        // if (spell.NeedsTargetPart)
        // {
        //     Output.WriteLine("Select a part to target:");
        //     var parts = target.Body.GetAllParts();
        //     var part = Input.GetSelectionFromList(parts)!;
        //     spell.Cast(target, part);
        // }
        // else
        // {
        // }
        spell.Cast(target);
        // Player._skills.AddExperience("Shamanism", 2);
    }
}
================================================================================

File: Actions/CombatActions/PlayerCombatTurnAction.cs
--------------------------------------------------------------------------------
using text_survival.Actors;
using text_survival.IO;

namespace text_survival.Actions;

public class PlayerCombatTurnAction(Npc enemy) : GameActionBase("Player Turn")
{
    public override bool IsAvailable(GameContext ctx)
    {
        return ctx.player.IsAlive && enemy.IsAlive && ctx.player.IsEngaged;
    }
    protected override void OnExecute(GameContext ctx)
    {
        Output.WriteLine("─────────────────────────────────────");
        DisplayCombatStatus(ctx.player, enemy);
    }
    protected override List<IGameAction> GetNextActions(GameContext ctx)
    {
        return [new AttackEnemy(enemy), new TargetedAttackEnemy(enemy), new SelectSpell(enemy), new FleeCombat(enemy)];
    }
    private static void DisplayCombatStatus(Player player, Actor enemy)
    {
        ConsoleColor oldColor = Console.ForegroundColor;

        // Player status
        Console.ForegroundColor = GetHealthColor(player.Body.Health / player.Body.MaxHealth);
        Output.WriteLine($"You: {Math.Round(player.Body.Health, 0)}/{Math.Round(player.Body.MaxHealth, 0)} HP");

        // Enemy status
        Console.ForegroundColor = GetHealthColor(enemy.Body.Health / enemy.Body.MaxHealth);
        Output.WriteLine($"{enemy.Name}: {Math.Round(enemy.Body.Health, 0)}/{Math.Round(enemy.Body.MaxHealth, 0)} HP");

        Console.ForegroundColor = oldColor;
    }

    private static ConsoleColor GetHealthColor(double healthPercentage)
    {
        if (healthPercentage < 0.2) return ConsoleColor.Red;
        if (healthPercentage < 0.5) return ConsoleColor.Yellow;
        return ConsoleColor.Green;
    }
    private readonly Npc enemy = enemy;
}
================================================================================

File: Actions/CombatActions/StartCombatAction.cs
--------------------------------------------------------------------------------
using text_survival.Actors;
using text_survival.IO;

namespace text_survival.Actions;

public class StartCombatAction(Npc enemy) : GameActionBase($"Fight {enemy.Name}")
{
    public override bool IsAvailable(GameContext ctx) => enemy.IsAlive && enemy.IsFound;

    protected override void OnExecute(GameContext ctx)
    {
        Output.WriteLine("!");
        Thread.Sleep(500);
        Output.WriteLine(CombatNarrator.DescribeCombatStart(ctx.player, enemy));

        ctx.player.IsEngaged = true;
        enemy.IsEngaged = true;

        // First strike determination
        bool enemyFirstStrike = enemy.Body.CalculateSpeed() > ctx.player.Body.CalculateSpeed();

        if (enemyFirstStrike)
        {
            Output.WriteLine($"The {enemy.Name} moves with surprising speed!");
            Thread.Sleep(500);
            NextActionOverride = new EnemyCombatTurn(enemy);
            return;
        }
        else
        {
            Output.WriteLine("You're quick to react, giving you the initiative!");
            Thread.Sleep(500);
        }
    }
    protected override List<IGameAction> GetNextActions(GameContext ctx) => [new PlayerCombatTurnAction(enemy)];
    private readonly Npc enemy = enemy;
}
================================================================================

File: Actions/CombatActions/AttackEnemy.cs
--------------------------------------------------------------------------------
using text_survival.Actors;

namespace text_survival.Actions;

public class AttackEnemy(Npc enemy) : GameActionBase($"Attack {enemy.Name}")
{
    protected override List<IGameAction> GetNextActions(GameContext ctx) => [new EnemyCombatTurn(enemy), new EndCombatAction(enemy)];

    protected override void OnExecute(GameContext ctx)
    {
        ctx.player.Attack(enemy);
    }
}
================================================================================

File: Actions/CombatActions/TargetedAttackEnemy.cs
--------------------------------------------------------------------------------
using text_survival.Actors;
using text_survival.Bodies;
using text_survival.IO;

namespace text_survival.Actions;

public class TargetedAttackEnemy(Npc enemy) : GameActionBase($"Targeted Attack {enemy.Name}")
{
    public override bool IsAvailable(GameContext ctx)
    {
        return ctx.player.Skills.Fighting.Level > 1;
    }
    protected override List<IGameAction> GetNextActions(GameContext ctx) => [new EnemyCombatTurn(enemy), new EndCombatAction(enemy)];

    protected override void OnExecute(GameContext ctx)
    {
        int fightingSkill = ctx.player.Skills.Fighting.Level;
        string? targetPart = SelectTargetPart(enemy, fightingSkill);
        if (targetPart != null)
        {
            ctx.player.Attack(enemy, targetPart);
        }
        else
        {
            NextActionOverride = new PlayerCombatTurnAction(enemy);
        }
    }
    private static string? SelectTargetPart(Actor enemy, int depth)
    {
        if (depth <= 0)
        {
            Output.WriteWarning("You don't have enough skill to target an attack");
            return null;
        }
        Output.WriteLine($"Where do you want to target your attack on the {enemy.Name}?");

        // Group body parts by region for better organization
        var allParts = enemy.Body.GetPartsToNDepth(depth)!;

        BodyPart? choice = Input.GetSelectionFromList(allParts, true);
        if (choice == null)
            return null;

        // todo return part itself
        return choice.Name;
    }
    private readonly Npc enemy = enemy;
}
================================================================================

File: Actions/CombatActions/EndCombatAction.cs
--------------------------------------------------------------------------------
using text_survival.Actors;
using text_survival.IO;

namespace text_survival.Actions;

public class EndCombatAction(Npc enemy) : GameActionBase("End Combat")
{
    public override bool IsAvailable(GameContext ctx)
    {
        return !enemy.IsEngaged || !ctx.player.IsEngaged || !ctx.player.IsAlive || !enemy.IsAlive;
    }

    protected override void OnExecute(GameContext ctx)
    {
        ctx.player.IsEngaged = false;
        enemy.IsEngaged = false;

        // Combat end
        if (!ctx.player.IsAlive)
        {
            Output.WriteDanger("Your vision fades to black as you collapse... You have died!");
            Environment.Exit(0);
        }
        else if (!enemy.IsAlive)
        {
            string[] victoryMessages = {
                    $"The {enemy.Name} collapses, defeated!",
                    $"You stand victorious over the fallen {enemy.Name}!",
                    $"With a final blow, you bring down the {enemy.Name}!"
                };
            Output.WriteLine(victoryMessages[Utils.RandInt(0, victoryMessages.Length - 1)]);

            // Calculate experience based on enemy difficulty
            int xpGain = CalculateExperienceGain();
            Output.WriteLine($"You've gained {xpGain} fighting experience!");
            ctx.player.Skills.Fighting.GainExperience(xpGain); 
        }
    }
    protected override List<IGameAction> GetNextActions(GameContext ctx) => [];

    private int CalculateExperienceGain()
    {
        // Base XP
        int baseXP = 5;

        // Adjust based on enemy weight/size
        double sizeMultiplier = Math.Clamp(enemy.Body.Weight / 50, 0.5, 3.0);

        // Adjust based on enemy weapon damage
        double weaponMultiplier = Math.Clamp(enemy.ActiveWeapon.Damage / 8, 0.5, 2.0);

        return (int)(baseXP * sizeMultiplier * weaponMultiplier);
    }
    private readonly Npc enemy = enemy;
}================================================================================

File: Actions/MoveActions/GoToLocation.cs
--------------------------------------------------------------------------------
using text_survival.Environments;

namespace text_survival.Actions;

public class GoToLocation(Location location) : GameActionBase($"Go to {location.Name}{(location.Visited ? " (Visited)" : "")}")
{
    public override bool IsAvailable(GameContext ctx) => location.IsFound;

    protected override List<IGameAction> GetNextActions(GameContext ctx)
    {
        return [];
    }
    protected override void OnExecute(GameContext ctx)
    {
        location.Interact(ctx.player);
    }
    private readonly Location location = location;
}
================================================================================

File: Actions/MoveActions/MoveAction.cs
--------------------------------------------------------------------------------
using text_survival.IO;

namespace text_survival.Actions;

public class Move() : GameActionBase("Go somewhere else")
{
    protected override List<IGameAction> GetNextActions(GameContext ctx)
    {
        var options = new List<IGameAction>();
        foreach (var location in ctx.currentLocation.GetNearbyLocations())
        {
            options.Add(new GoToLocation(location));
        }
        options.Add(new Travel());
        options.Add(new ReturnAction("Stay Here..."));
        return options;
    }

    protected override void OnExecute(GameContext ctx)
    {
        var locations = ctx.currentLocation.GetNearbyLocations().Where(l => l.IsFound).ToList();
        bool inside = ctx.player.CurrentLocation.GetFeature<ShelterFeature>() != null;
        if (inside)
        {
            Output.WriteLine($"You can leave the shelter and go outside.");
        }
        if (locations.Count == 0)
        {
            Output.WriteLine("You don't see anywhere noteworthy nearby; you can stay here or travel to a new area.");
            return;
        }
        else if (locations.Count == 1)
        {
            Output.WriteLine($"You can go to the {locations[0].Name} or pack up and leave the region.");
        }
        else
        {
            Output.WriteLine("You see several places that you can go to from here, or you can pack up and leave the region.");
        }
    }
}================================================================================

File: Actions/MoveActions/TravelAction.cs
--------------------------------------------------------------------------------
namespace text_survival.Actions;
public class Travel() : GameActionBase("Travel to a different area")
{
    protected override List<IGameAction> GetNextActions(GameContext ctx)
    {
        return [];
    }

    protected override void OnExecute(GameContext ctx)
    {
        ctx.player.Travel();
    }
    public override bool IsAvailable(GameContext ctx)
    {
        if (ctx.player.CurrentLocation.GetFeature<ShelterFeature>() != null)
        {
            return false;
        }
        return base.IsAvailable(ctx);
    }
}================================================================================

File: Actions/DefaultAction.cs
--------------------------------------------------------------------------------
namespace text_survival.Actions;

public class DefaultAction() : GameActionBase("Default")
{
    protected override List<IGameAction> GetNextActions(GameContext ctx)
    {
        var actions = new List<IGameAction>();
        actions.AddRange([
                new LookAround(ctx.currentLocation),
                new Forage(),
                new OpenInventory(),
                new CheckStats(),
                new Sleep(),
                new Move(),
            ]);
        return actions;
    }
    protected override void OnExecute(GameContext ctx)
    {
        // this is mainly just a router to select the next action 
        ctx.player.DescribeSurvivalStats();
    }
}
================================================================================

File: Actions/GameContext.cs
--------------------------------------------------------------------------------
using text_survival.Environments;

namespace text_survival.Actions;

public class GameContext(Player player)
{
    public Player player = player;
    public Location currentLocation => player.CurrentLocation;
}
================================================================================

